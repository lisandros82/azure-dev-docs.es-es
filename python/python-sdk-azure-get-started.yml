### YamlMime:Tutorial
title: Introducción al desarrollo de soluciones para la nube con las bibliotecas de Azure para Python
metadata:
  title: Introducción a las bibliotecas de Azure para Python
  description: Aprenda a crear recursos de nube de Azure y a conectarlos y usarlos en las aplicaciones de Python.
  author: kraigb
  ms.author: kraigb
  manager: barbkess
  audience: Developer
  level: Beginner
  nextTutorialHref: /python/api/overview/azure/?view=azure-python
  nextTutorialTitle: referencia de SDK de python
  displayType: two-column
  interactive: azurecli
  ms.date: 10/18/2019
  ms.openlocfilehash: 32cfda14e307d0293c9ffec8b24685375cc929d0
  ms.sourcegitcommit: 7e5392a0af419c650225cfaa10215d1e0e56ce71
  ms.translationtype: HT
  ms.contentlocale: es-ES
  ms.lasthandoff: 11/04/2019
  ms.locfileid: "73568197"
items:
- durationInMinutes: 1
  content: "Esta guía muestra cómo utilizar diversas bibliotecas de Azure SDK para Python.  \n"
- title: Requisitos previos
  durationInMinutes: 5
  content: >
    - Una cuenta de Azure. Si no tiene una, [obtenga la versión de evaluación gratuita](https://azure.microsoft.com/free/).

    - [El intérprete de Python 3.x más reciente](https://www.python.org/downloads/)

    - La [CLI de Azure 2.0](/azure/install-az-cli2) para trabajar de forma local, o [Azure Cloud Shell](/azure/cloud-shell/quickstart) para trabajar exclusivamente en la nube.
- title: Configuración de la autenticación
  durationInMinutes: 5
  content: >
    El SDK es capaz de crear un cliente con su suscripción activa de la CLI. Sin embargo, con fines de producción, use [ADAL](https://github.com/AzureAD/azure-activedirectory-library-for-python) o su propio sistema de credenciales.


    Para definir las credenciales activas, utilice [az login](/azure/authenticate-azure-cli).

    El identificador predeterminado de la suscripción puede ser el que ya tiene o puede definirlo con [az account](/azure/manage-azure-subscriptions-azure-cli).


    ```python

    from azure.common.client_factory import get_client_from_cli_profile

    from azure.mgmt.compute import ComputeManagementClient


    client = get_client_from_cli_profile(ComputeManagementClient)

    ```
- title: Creación de un entorno virtual
  durationInMinutes: 5
  content: >
    Un entorno virtual mantiene las bibliotecas del SDK en una ubicación aislada del proyecto, lo que permite eliminar la carpeta del entorno para desinstalar fácilmente el SDK cuando sea necesario.


    Cree un entorno virtual en Bash (Linux o [Bash para Windows](https://msdn.microsoft.com/commandline/wsl/about)):

    ```bash

    pip install virtualenv

    virtualenv mytestenv

    cd mytestenv

    source ./bin/activate

    ```


    Cree un entorno virtual en PowerShell:

    ```powershell

    pip install virtualenv

    virtualenv mytestenv

    cd mytestenv

    .\Scripts\activate

    ```
- title: Creación de una máquina virtual con Linux
  durationInMinutes: 5
  content: >
    Este código crea una nueva máquina virtual Linux con el nombre `testLinuxVM` en un grupo de recursos `sampleVmResourceGroup` que se ejecuta en la región de Azure este de EE. UU.


    Autenticación:

    ```azcli

    az login

    ```

    Cree un grupo de recursos:

    ```azurecli-interactive

    az group create -l eastus --n sampleVmResourceGroup

    ```


    Cree una red virtual y una subred:

    ```azurecli-interactive

    az network vnet create -g sampleVmResourceGroup -n azure-sample-vnet --address-prefix 10.0.0.0/16 --subnet-name azure-sample-subnet --subnet-prefix 10.0.0.0/24

    ```


    Cree una dirección IP pública:

    ```azurecli-interactive

    az network public-ip create -g sampleVmResourceGroup -n azure-sample-ip --allocation-method Dynamic --version IPv4

    ```

    Cree un cliente de interfaz de red:

    ```azurecli-interactive

    az network nic create -g sampleVmResourceGroup --vnet-name azure-sample-vnet --subnet azure-sample-subnet -n azure-sample-nic --public-ip-address azure-sample-ip

    ```


    ```python

    from azure.mgmt.network import NetworkManagementClient

    from azure.mgmt.compute import ComputeManagementClient

    from azure.common.client_factory import get_client_from_cli_profile


    # Azure Datacenter

    LOCATION = 'eastus'


    # Resource Group

    GROUP_NAME = 'sampleVmResourceGroup'


    # Network

    VNET_NAME = 'azure-sample-vnet'

    SUBNET_NAME = 'azure-sample-subnet'


    # VM

    NIC_NAME = 'azure-sample-nic'

    VM_NAME = 'testLinuxVM'


    USERNAME = 'userlogin'

    PASSWORD = 'Pa$$w0rd91'


    IP_ADDRESS_NAME='azure-sample-ip'


    VM_REFERENCE = {
        'linux': {
            'publisher': 'Canonical',
            'offer': 'UbuntuServer',
            'sku': '16.04.0-LTS',
            'version': 'latest'
        },
        'windows': {
            'publisher': 'MicrosoftWindowsServerEssentials',
            'offer': 'WindowsServerEssentials',
            'sku': 'WindowsServerEssentials',
            'version': 'latest'
        }
    }



    def run_example():

        compute_client = get_client_from_cli_profile(ComputeManagementClient)
        network_client = get_client_from_cli_profile(NetworkManagementClient)

        # get nic id
        nic = network_client.network_interfaces.get(GROUP_NAME, NIC_NAME)

        # Create Linux VM
        print('\nCreating Linux Virtual Machine')
        vm_parameters = create_vm_parameters(nic.id, VM_REFERENCE['linux'])
        print(vm_parameters)
        async_vm_creation = compute_client.virtual_machines.create_or_update(
            GROUP_NAME, VM_NAME, vm_parameters)
        async_vm_creation.wait()


    def create_vm_parameters(nic_id, vm_reference):
        """Create the VM parameters structure.
        """
        return {
            'location': LOCATION,
            'os_profile': {
                'computer_name': VM_NAME,
                'admin_username': USERNAME,
                'admin_password': PASSWORD
            },
            'hardware_profile': {
                'vm_size': 'Standard_DS1_v2'
            },
            'storage_profile': {
                'image_reference': {
                    'publisher': vm_reference['publisher'],
                    'offer': vm_reference['offer'],
                    'sku': vm_reference['sku'],
                    'version': vm_reference['version']
                },
            },
            'network_profile': {
                'network_interfaces': [{
                    'id': nic_id,
                }]
            },
        }


    if __name__ == "__main__":
        run_example()
    ```


    Cuando finalice el programa, compruebe la máquina virtual en la suscripción con la CLI de Azure 2.0:


    ```azurecli-interactive

    az vm list --resource-group sampleVmResourceGroup

    ```


    Una vez que haya comprobado que el código ha funcionado, utilice la CLI para eliminar la máquina virtual y sus recursos.


    ```azurecli-interactive

    az group delete --name sampleVmResourceGroup

    ```
- title: Implementación de una aplicación web desde un repositorio de GitHub
  durationInMinutes: 5
  content: "Este código implementa una aplicación web de Flask de la rama `master` de un repositorio de GitHub en una nueva [aplicación web de Azure App Service](https://docs.microsoft.com/azure/app-service-web/app-service-web-overview) que se ejecuta en el nivel gratuito. \n\nAntes de empezar: Bifurcación https://github.com/Azure-Samples/python-docs-hello-world\n\nAutenticación:\n```azcli\naz login\n```\nCree un grupo de recursos:\n```azurecli-interactive\naz group create -l eastus -n sampleWebResourceGroup\n```\n\nCree un plan gratuito de App Service:\n```azurecli-interactive\naz appservice plan create -g sampleWebResourceGroup -n sampleFreePlan  --sku Free\n```\n\n```python\nfrom azure.mgmt.web import WebSiteManagementClient\nfrom azure.mgmt.web.models import Site, SiteSourceControl, SiteConfig\nfrom azure.common.client_factory import get_client_from_cli_profile\n\nRESOURCE_GROUP_NAME = 'sampleWebResourceGroup'\nSERVICE_PLAN_NAME = 'sampleFreePlanName'\nWEB_APP_NAME = 'sampleflaskapp123'\nREPO_URL = 'GitHub_Repository_URL'\n\n#log in\nweb_client = get_client_from_cli_profile(WebSiteManagementClient)\n\n# get service plan id\nservice_plan = web_client.app_service_plans.get(RESOURCE_GROUP_NAME, SERVICE_PLAN_NAME)\n\n# create a web app\nsiteConfiguration = SiteConfig(\n    python_version='3.4',\n)\nsite_async_operation = web_client.web_apps.create_or_update(\n    RESOURCE_GROUP_NAME,\n    WEB_APP_NAME,\n    Site(\n        location='eastus',\n        server_farm_id=service_plan.id,\n        site_config=siteConfiguration\n    ),\n)\n\nsite = site_async_operation.result()\nprint('created webapp: ' + site.default_host_name)\n\n# continuous deployment with GitHub\nsource_control_async_operation = web_client.web_apps.create_or_update_source_control(\n    RESOURCE_GROUP_NAME,\n    WEB_APP_NAME,\n    SiteSourceControl(\n        location='GitHub',\n        repo_url= REPO_URL,\n        branch='master'\n    )\n)\n\nsource_control = source_control_async_operation.result()\nprint(\"added source control to: \" + source_control.name + \"azurewebsites.net\")\n```\n\nAbra un explorador que apunta a la aplicación mediante la CLI:\n```azurecli-interactive\naz appservice web browse --resource-group sampleWebResourceGroup --name YOUR_APP_NAME\n```\n\nElimine la aplicación web y el plan de su suscripción una vez que haya comprobado la implementación. \n```azurecli-interactive\naz group delete --name sampleWebResourceGroup\n```\n"
- title: Conexión a una base de datos SQL
  durationInMinutes: 5
  content: "Este código crea una nueva base de datos SQL con una regla de firewall que permita el acceso remoto y, a continuación, se conecta a ella mediante el controlador ODBC de Microsoft. Pyodbc usa Microsoft ODBC Driver on Linux para conectarse a SQL Database. \n\nAutenticación:\n```azcli\naz login\n```\nCree un grupo de recursos:\n```azurecli-interactive\naz group create -l eastus -n azure-sample-group\n```\n\nCree un servidor SQL:\n```azurecli-interactive\naz sql server create --admin-password HusH_Sec4et --admin-user mysecretname -l eastus -n samplesqlserver123 -g azure-sample-group\n```\n\nAgregue una regla de firewall:\n```azurecli-interactive\naz sql server firewall-rule create --end-ip-address 167.220.0.235 --name firewall_rule_name_123.123.123.123 --resource-group azure-sample-group --server samplesqlserver123 --start-ip-address 123.123.123.123\n```\n\nCree una base de datos SQL:\n```azurecli-interactive\naz sql db create --name sample-db --resource-group azure-sample-group --server samplesqlserver123\n```\n\n```python\nfrom azure.mgmt.sql import SqlManagementClient\nfrom azure.common.client_factory import get_client_from_cli_profile\nimport pyodbc\n\nLOCATION = 'eastus'\nGROUP_NAME = 'azure-sample-group'\nSERVER_NAME = 'samplesqlserver123'\nDATABASE_NAME = 'sample-db'\nUSER_NAME ='mysecretname'\nPASSWORD='HusH_Sec4et'\n\n# authenticate\nsql_client = get_client_from_cli_profile(SqlManagementClient)\n\n\ndef run_example():\n# Get SQL database\nprint('Get SQL database')\ndatabase = sql_client.databases.get(\n    GROUP_NAME,\n    SERVER_NAME,\n    DATABASE_NAME\n)\nprint(database)\nprint(\"\\n\\n\")\n\n\ndef create_and_insert():\nserver = SERVER_NAME+'.database.windows.net'\ndatabase = DATABASE_NAME\nusername = USER_NAME\npassword = PASSWORD\ndriver = '{ODBC Driver 13 for SQL Server}'\ncnxn = pyodbc.connect(\n    'DRIVER=' + driver + ';PORT=1433;SERVER=' + server + ';PORT=1443;DATABASE=' + database + ';UID=' + username + ';PWD=' + password)\ncursor = cnxn.cursor()\ntsql = \"CREATE TABLE CLOUD (name varchar(255), code int);\"\ntsqlInsert = \"INSERT INTO CLOUD (name, code) VALUES ('Azure', 1); \"\nselectValues = \"SELECT * FROM CLOUD\"\nwith cursor.execute(tsql):\n    print('Successfully created table!')\nwith cursor.execute(tsqlInsert):\n    print('Successfully inserted data into table')\ncursor.execute(selectValues)\nrow = cursor.fetchone()\nwhile row:\n    print(str(row[0]) + \" \" + str(row[1]))\n    row = cursor.fetchone()\ncnxn.commit()\n\nif __name__ == \"__main__\":\nrun_example()\ncreate_and_insert()\n```\n\nUna vez que haya comprobado que el código funciona, use la CLI para eliminar la base de datos SQL y sus recursos.\n\n```azurecli-interactive\naz group delete --name azure-sample-group\n```\n"
- title: Escritura de un blob en una nueva cuenta de almacenamiento
  durationInMinutes: 5
  content: "Autenticación:\n```azcli\naz login\n```\nCree un grupo de recursos:\n```azurecli-interactive\naz group create -l eastus -n sampleStorageResourceGroup\n```\n\nCree una cuenta de almacenamiento:\n```azurecli-interactive\naz storage account create -n samplestorageaccountname -g sampleStorageResourceGroup -l eastus --sku Standard_RAGRS\n```\n\nEste código crea una [cuenta de almacenamiento de Azure](https://docs.microsoft.com/azure/storage/storage-introduction) y, a continuación, usa las bibliotecas de Azure Storage para Python para crear un nuevo archivo html en la nube. \n```python\nfrom azure.storage import CloudStorageAccount\nfrom azure.storage.blob import PublicAccess\nfrom azure.storage.blob.models import ContentSettings\nfrom azure.common.client_factory import get_client_from_cli_profile\nfrom azure.mgmt.storage import StorageManagementClient\n\nRESOURCE_GROUP = 'sampleStorageResourceGroup'\nSTORAGE_ACCOUNT_NAME = 'samplestorageaccountname'\nCONTAINER_NAME = 'samplecontainername'\n\n# log in\nstorage_client = get_client_from_cli_profile(StorageManagementClient)\n\n# create a public storage container to hold the file\nstorage_keys = storage_client.storage_accounts.list_keys(RESOURCE_GROUP, STORAGE_ACCOUNT_NAME)\nstorage_keys = {v.key_name: v.value for v in storage_keys.keys}\n\nstorage_client = CloudStorageAccount(STORAGE_ACCOUNT_NAME, storage_keys['key1'])\nblob_service = storage_client.create_block_blob_service()\n\nblob_service.create_container(CONTAINER_NAME, public_access=PublicAccess.Container)\n\nblob_service.create_blob_from_bytes(\n    CONTAINER_NAME,\n    'helloworld.html',\n    b'<center><h1>Hello World!</h1></center>',\n    content_settings=ContentSettings('text/html')\n)\n\nprint(blob_service.make_blob_url(CONTAINER_NAME, 'helloworld.html'))\n```\nPara comprobar que el contenido se ha cargado correctamente, vaya a la dirección URL impresa. \n\nLimpie la cuenta de almacenamiento mediante la CLI:\n```azurecli-interactive\naz group delete --name sampleStorageResourceGroup\n```\n"
- title: Pasos siguientes
  content: >-
    Ha completado la "Introducción a las bibliotecas de Azure para Python".


    - Para más información sobre cómo usar las bibliotecas de administración de Azure para Python para administrar los recursos y automatizar las tareas, vea el código de ejemplo para [máquinas virtuales](python-sdk-azure-web-apps-samples.md), [aplicaciones web](python-sdk-azure-web-apps-samples.md) y [base de datos SQL](python-sdk-azure-sql-database-samples.md).


    - Hay una [referencia](/python/api/overview/azure/?view=azure-python) disponible para todos los paquetes.
